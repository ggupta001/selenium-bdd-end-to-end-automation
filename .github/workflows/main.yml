name: Run Selenium BDD Feature Files

on:
  workflow_dispatch:
    inputs:
      feature:
        description: 'Select a feature file to run'
        required: true
        default: 'RegisterPageTest'
        type: choice
        options:
          - RegisterPageTest
          - LoginPageTest
          - all
  push:
    branches:
      - master

permissions:
  contents: read

jobs:
  run-feature:
    runs-on: ubuntu-latest

    env:
      USER_NAME: ${{ secrets.USER_NAME }}
      USER_PASSWORD: ${{ secrets.USER_PASSWORD }}
      SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
      SENDGRID_SENDER_EMAIL: ${{ secrets.SENDGRID_SENDER_EMAIL }}
      RECIPIENT_EMAIL: ${{ secrets.RECIPIENT_EMAIL }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set up JDK (Adoptium Temurin)
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Install Maven
        run: |
          sudo apt update
          sudo apt install maven

      - name: Install Dependencies (Maven)
        run: |
          mvn clean install

      - name: Run Cucumber Feature
        id: run_tests
        run: |
          echo "Running feature files based on input: ${{ github.event.inputs.feature }}"
          if [ "${{ github.event.inputs.feature }}" == "all" ]; then
            mvn clean test -Dcucumber.options="classpath:features"
          else
            mvn clean test -Dcucumber.options="classpath:features/${{ github.event.inputs.feature }}.feature"
          fi
          echo "Test execution completed"

      - name: Generate Extent Report PDF
        run: |
          mvn clean test -Dcucumber.options="classpath:features" -DextentReports.outputDir=test-output/PdfReport

      - name: Encode Extent Report PDF to Base64
        run: |
          # Base64 encode the extent report PDF file and save it to a temporary file
          base64 test-output/PdfReport/ExtentPdf.pdf > extent_report_base64.txt

      - name: Read Base64 Content from File
        id: read_base64
        run: |
          # Read the base64 content from the file
          BASE64_CONTENT=$(cat extent_report_base64.txt)
          echo "BASE64_CONTENT_LENGTH=${#BASE64_CONTENT}" # Output the length for debugging
          echo "BASE64_CONTENT=${BASE64_CONTENT}" >> $GITHUB_ENV # Store base64 content as an environment variable

      - name: Send Test Result Email with Extent Report Attachment
        if: ${{ always() }}  # Ensure it runs even if tests fail
        run: |
          # Send email using SendGrid API with HTML content and attachment
          curl -X POST "https://api.sendgrid.com/v3/mail/send" \
            -H "Authorization: Bearer $SENDGRID_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
              "personalizations": [
                {
                  "to": [{"email": "'${{ secrets.RECIPIENT_EMAIL }}'"}],
                  "subject": "Regression Test Results for BrandsHub"
                }
              ],
              "from": {"email": "'${{ secrets.SENDGRID_SENDER_EMAIL }}'"},
              "content": [
                {
                  "type": "text/html",
                  "value": "Hi team. Kindly find the regression report for BrandsHub.<br><br>"
                }
              ],
              "attachments": [
                {
                  "content": "'"${{ env.BASE64_CONTENT }}"'",
                  "type": "application/pdf",
                  "filename": "ExtentPdf.pdf",
                  "disposition": "attachment"
                }
              ]
            }'
